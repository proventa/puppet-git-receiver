#!/bin/bash

function msg { echo -e "\E[${COLOUR}m$@\E[0m" >&2 ; }
function notice { COLOUR="0;36" msg "notice: $@" ; }
function error { COLOUR="0;31" msg "err: $@" ; }

function cleanup {
		if [[ "$DEST" != "" ]] && [ -d "$DEST" ] ; then
				rm -rf $DEST
		fi
}

function cleanup_and_error {
		cleanup
		error $2
		exit $1
}

set -o pipefail

DEST=

# extra options passed to puppet agent
PUPPET_OPTIONS=

# extra options passed to puppet-lint
LINT_OPTIONS=

full_puppet_options="$PUPPET_OPTIONS $(git config puppet-receiver.args)"
full_lint_options="$LINT_OPTIONS $(git config puppet-receiver.lint-args)"

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ] ; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ] ; then
	echo "Usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

notice "checking push for problems on `hostname -f`"

if ! which puppet >/dev/null ; then
		cleanup_and_error 1 "Cannot find puppet"
fi

if ! which facter >/dev/null ; then
		cleanup_and_error 1 "Cannot find facter utility"
fi

puppetver=$(facter puppetversion)

if [[ $puppetver == 2.6.* || $puppetver == 0.2* ]] ; then
		validate_command="xargs --no-run-if-empty -n1 puppet --parseonly $full_puppet_options"
else
		validate_command="xargs --no-run-if-empty puppet parser validate $full_puppet_options"
fi

style_command="xargs -L 1 --no-run-if-empty puppet-lint --with-filename $full_lint_options"
validate_template_command="xargs -i --no-run-if-empty sh -c 'erb -x -T - \$0 | ruby -c >/dev/null' {}"

DEST=$(mktemp -d --suffix=.puppet-git-receiver)
module_path="${DEST}/modules"

notice "changed files:"
git diff --name-status "$oldrev".."$newrev" 

if ! git archive --format=tar $newrev $(git diff --name-only --diff-filter=ACMRTUXB --ignore-submodules "$oldrev" "$newrev") | (cd $DEST && tar xf -) ; then
		cleanup_and_error 1 "Encountered a problem extracting the incoming git tree $newrev"
fi

skip_validation=$(git config --bool puppet-receiver.skip-validation)

if [ "$skip_validation" == "true" ] ; then
		notice "Skipping puppet validation due to config option puppet-receiver.skip-validation"
else
		notice "Validating puppet manifests for $refname"		
        if ! find $DEST -name '*.pp' | $validate_command |& sed -u "s,$DEST/,,g" ; then
				cleanup_and_error 1 "Encountered a problem validating the puppet manifests"
		fi

        notice "Validating erb templates for $refname"		
        if ! find $DEST -name '*.erb' | xargs -i --no-run-if-empty sh -c 'erb -x -T - $0 | ruby -c >/dev/null || (echo "in File $0"; exit 1)' {} |& sed -u "s,$DEST/,,g" ; then
				cleanup_and_error 1 "Encountered a problem validating the erb template"
		fi

fi

skip_style=$(git config --bool puppet-receiver.skip-style)

if [ "$skip_style" == "true" ] ; then
		notice "Skipping puppet style check due to config option puppet-receiver.skip-style"
else
		notice "Checking puppet manifests for style guideline for $refname"		
        if ! find $DEST -name '*.pp' | $style_command |& sed -u "s,$DEST/,,g" ; then
				cleanup_and_error 1 "Encountered a problem checking the puppet manifests style."
		fi
fi


cleanup
